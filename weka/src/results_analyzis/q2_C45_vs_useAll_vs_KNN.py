from matplotlib.axis import XAxis
from scipy.stats.mstats_basic import friedmanchisquare
from scipy.stats.morestats import wilcoxon, binom_test, shapiro
from matplotlib.pyplot import *
from numpy.lib.function_base import average, median
import numpy
from matplotlib.mlab import normpdf
from scipy.stats.stats import ttest_1samp

J48 = [98.44097995545657,64.38053097345133,77.87610619469027,94.56366237482118,57.142857142857146,52.13849287169043,70.5,57.77777777777778,73.828125,100.0,73.6842105263158,83.33333333333333,77.02702702702703,69.03846153846153,82.31009365244537,88.95,82.25806451612904,67.12962962962963,100.0,97.05246913580247,80.51282051282051,70.0,96.19047619047619,75.83176396735719,93.33333333333333,99.53095684803002,92.97978700282547,59.602649006622514,84.55114822546973,90.0,72.45862884160756,81.51515151515152,58.125765618619845,92.07920792079207,]
IBk = [99.10913140311804,52.876106194690266,77.87610619469027,95.13590844062946,63.80952380952381,44.33129667345553,72.0,74.44444444444444,70.18229166666667,100.0,82.45614035087719,79.16666666666667,82.43243243243244,54.26923076923077,76.69094693028096,95.85,76.61290322580645,59.25925925925926,100.0,98.37962962962963,96.41025641025641,66.66666666666667,96.57142857142857,91.46264908976774,93.33333333333333,99.24953095684803,90.78461204086068,62.25165562913907,98.95615866388309,60.0,69.8581560283688,99.29292929292929,65.39403838301348,96.03960396039604,]
useAllAttributes7NN = [98.55233853006682,63.05309734513274,83.6283185840708,94.70672389127324,62.857142857142854,49.89816700610998,71.0,71.48148148148148,72.91666666666667,100.0,78.94736842105263,83.33333333333333,78.37837837837837,69.03846153846153,81.47762747138397,90.35,81.45161290322581,59.25925925925926,100.0,97.42283950617283,81.02564102564102,70.0,96.52380952380952,77.96610169491525,93.33333333333333,99.53095684803002,92.97978700282547,59.602649006622514,87.160751565762,90.0,72.93144208037825,87.87878787878788,61.739485504287465,95.04950495049505,]

additional_J48 = [81.95121951219512,76.64,91.0,75.52447552447552,56.19047619047619,92.36111111111111,85.32608695652173,66.30434782608695,86.08695652173913,93.98907103825137,77.02702702702703,92.14680347277033,59.27835051546392,66.82242990654206,72.87581699346406,57.142857142857146,80.3030303030303,77.55775577557756,80.95238095238095,32.520325203252035,76.66666666666667,83.87096774193549,50.495049504950494,99.57582184517497,97.04178103080207,91.45299145299145,99.43679599499374,87.98,68.69565217391305,78.125,75.25,82.85,72.05,88.95,71.85,21.69811320754717,96.52777777777777,56.21301775147929,100.0,93.44262295081967,69.72222222222223,99.5798319327731,96.33280757097792,90.69395017793595,96.87557098483464,96.56113537117903,39.823008849557525,96.19047619047619,89.04761904761905,98.80699893955462,97.83281733746131,71.15384615384616,91.50805270863836,81.73258003766479,65.24064171122994,71.25,92.10526315789474,80.0,77.80748663101605,96.32183908045977,75.08,93.14586994727593,61.475922451532206,75.75757575757575,84.22619047619048,]
additional_IBk = [76.09756097560975,86.56,71.5,72.37762237762237,62.857142857142854,93.51851851851852,81.25,63.58695652173913,81.15942028985508,94.53551912568307,63.513513513513516,92.0284135753749,56.70103092783505,70.5607476635514,68.30065359477125,46.42857142857143,75.0,76.23762376237623,76.87074829931973,26.829268292682926,75.18518518518519,80.64516129032258,65.18151815181518,91.51643690349947,95.94388533089356,86.32478632478633,99.43679599499374,87.98,68.69565217391305,78.125,75.25,82.85,72.05,88.95,71.85,21.69811320754717,96.52777777777777,56.21301775147929,100.0,93.44262295081967,69.72222222222223,99.5798319327731,95.26813880126183,98.61209964412811,96.01680979353188,99.363173216885,39.233038348082594,96.57142857142857,87.14285714285714,96.18239660657476,96.28482972136223,86.53846153846153,91.21522693997072,81.35593220338983,62.032085561497325,53.75,92.10526315789474,75.55555555555556,70.45454545454545,92.41379310344827,73.62,95.95782073813709,64.79049405878675,71.71717171717172,80.35714285714286,]
additional_useAllAttributes7NN = [83.41463414634147,79.52,89.16666666666667,75.17482517482517,60.95238095238095,93.22916666666667,83.69565217391305,66.03260869565217,85.21739130434783,93.71584699453553,74.32432432432432,92.34411996842935,55.670103092783506,71.49532710280374,70.91503267973856,57.142857142857146,81.81818181818181,79.53795379537954,79.25170068027211,33.333333333333336,77.77777777777777,82.58064516129032,57.17821782178218,99.60233297985154,97.19426654467826,91.73789173789174,99.4055068836045,89.655,64.92753623188406,75.0,75.45,84.4,64.65,90.05,70.1,22.641509433962263,96.99074074074075,55.02958579881657,100.0,92.62295081967213,73.61111111111111,98.31932773109244,96.33280757097792,91.47686832740213,96.29088251416043,97.08879184861718,37.75811209439528,96.52380952380952,88.57142857142857,98.83351007423117,97.83281733746131,71.15384615384616,92.67935578330894,82.67419962335217,64.1711229946524,70.0,92.10526315789474,80.74074074074075,75.26737967914438,96.0919540229885,74.98,92.9701230228471,58.72420262664165,76.76767676767676,82.14285714285714,]


def createGraph(list1,list2=None,list3=None,_title='',firstTitle='random_reordering',secondTitle='spins_first',thirdTitle='moves_first'):
    n, bins, patches = hist([list1,list2,list3],bins=20,normed = 0,
    color=['crimson', 'orange', 'chartreuse'], label=[firstTitle + " avg=" + str(average(list1))[0:5] + "%" , secondTitle + " avg=" + str(average(list2))[0:5] + "%", thirdTitle + " avg=" + str(average(list3))[0:5] + "%"])
#    legend()
    title(_title)
#    mu = average(list1)
#    sigma = numpy.std(list1) 
#    y = normpdf( bins, mu, sigma)
#    l = plot(bins, y, 'k--', linewidth=7,color='crimson')
#    if (list2 != None):
#        mu = average(list2)
#        sigma = numpy.std(list2) 
#        y = normpdf( bins, mu, sigma)
#        l = plot(bins, y, 'k--', linewidth=7,color='orange')
#    if (list3 != None):
#        mu = average(list3)
#        sigma = numpy.std(list3) 
#        y = normpdf( bins, mu, sigma)
#        l = plot(bins, y, 'k--', linewidth=7,color='chartreuse')
    xlabel('%correct')
    ylabel('frequency')
    show()

J48.extend(additional_J48)
IBk.extend(additional_IBk)
useAllAttributes7NN.extend(additional_useAllAttributes7NN)

'wilcoxon:'
print 'wilcoxon test for J48 or C4.5(7NN):', wilcoxon(J48, useAllAttributes7NN)
print 'wilcoxon test for IBk or C4.5(7NN):', wilcoxon(IBk, useAllAttributes7NN)

'binom test:'
scores = [ (a < b, a > b) for (a, b) in zip(J48, useAllAttributes7NN) ]
x = [ sum(s) for s in zip(*scores) ]
print 'binom test J48, C4.5(7NN)', binom_test(x)

scores = [ (a < b, a > b) for (a, b) in zip(IBk, useAllAttributes7NN) ]
x = [ sum(s) for s in zip(*scores) ]
print 'binom test KNN, C4.5(7NN)', binom_test(x)

'paired t test:'
x = [(a-b) for (a,b) in zip(J48,useAllAttributes7NN)]
print 'paired t-test for C4.5 and C4.5(7NN): pvalue = %6.4f' %  ttest_1samp(x, 0)[1]
x = [(a-b) for (a,b) in zip(IBk,useAllAttributes7NN)]
print 'paired t-test for 7NN and C4.5(7NN): pvalue = %6.4f' %  ttest_1samp(x, 0)[1]


print 'medians:'
print 'J48=', median(J48)
print 'KNN=', median(IBk)
print 'C4.5(7NN)=', median(useAllAttributes7NN)

print 'shapiro results:'
print 'J48=', shapiro(J48)
print 'KNN=', shapiro(IBk)
print 'C4.5(7NN)=', shapiro(useAllAttributes7NN)

print 'max vals:'
print 'J48=', max(J48)
print 'KNN=', max(IBk)
print 'C4.5(7NN)=', max(useAllAttributes7NN)

print 'min vals:'
print 'J48=', min(J48)
print 'KNN=', min(IBk)
print 'C4.5(7NN)=', min(useAllAttributes7NN)


print 'average:'
print 'J48=', average(J48)
print 'KNN=', average(IBk)
print 'C4.5(7NN)=', average(useAllAttributes7NN)



createGraph(J48, IBk, useAllAttributes7NN, 'J48 -vs- IBk -vs- C4.5(7NN)',firstTitle='J48',secondTitle='IBk',thirdTitle='C4.5(7NN)')


#print 'J48 = ', average(J48)
#print 'IBk = ', average(IBk)
#print 'useAllAttributes7NN = ', average(useAllAttributes7NN)

